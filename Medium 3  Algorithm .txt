Medium 3 : Algorithm 

Step 1: Check if the input matrix is empty or has no columns. If so, return 0, as there are no squares possible.

Step2: Get the dimensions of the input matrix (m rows and n columns).

Step 3: Create a 2D DP array (dp) with dimensions (m + 1) x (n + 1). This array is used to store the sizes of the largest square submatrices.

Step 4: Use nested loops to iterate through each element of the matrix starting from the second row and second column (i and j ranging from 1 to m and 1 to n).

Step5: If the current element in the original matrix is '1', update the DP array at position (i, j) based on the values in the adjacent cells (dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]). The update formula is dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1.

Step 6: Keep track of the maximum side length encountered so far by updating the max_side variable.

Step 7: The result is the area of the largest square, which is the square of the maximum side length (max_side * max_side).

Step 8: Return the calculated result.